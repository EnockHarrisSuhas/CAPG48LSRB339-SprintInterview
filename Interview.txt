ENOCK HARRIS SUHAS F
CAPG48LSRB339


1.What is difference in Overloading and Over riding


->                  OverRiding                                                        OverLoading
   *When the method signature (name and parameters) are the same     *When two or more methods in the same class have the same    
   in the superclass and the child class, it’s called Overriding.    name but different parameters, it’s called Overloading.   
   *Overriding implements Runtime Polymorphism                       *Overloading implements Compile time polymorphism.
   *The method Overriding occurs between superclass and subclass.    *Overloading occurs between the methods in the same class.
   *Overriding methods have the same signature i.e. same name        *Overloaded method names are the same but the parameters are different.
   and method arguments.
   *With overriding, the method call is determined at the runtime    *With Overloading, the method to call is determined at the compile-time.
   based on the object type.
   *If overriding breaks, it can cause serious issues in our         *if overloading breaks, the compile-time error will come and it’s easy to fix.
   program because the effect will be visible at runtime.  

2.If both the functions are static can we over ride

->  No, we cannot override static methods because method overriding is based on dynamic binding at runtime 
  and the static methods are bonded using static binding at compile time.


3. Diffference bew Final , Finally and Finalize

->          final	                                    finally	                                      finalize
    *final is the keyword and access        *finally is the block in Java Exception         *finalize is the method in Java which is used to 
    modifier which is used to apply          Handling to execute the important code          perform clean  up processing just before object 
    restrictions on a class, method or       whether the exception occurs or not.            is garbage collected. 
    variable.		
    *Final keyword is used with the 	  *Finally block is always related to the 	   *finalize() method is used with the objects.
    classes, methods and variables.          try and catch block in exception handling. 
    *Once declared, final variable          *finally block runs the important code even      *finalize method performs the cleaning activities 
    becomes constant and cannot be           if exception occurs or not.                      with respect to the object before its destruction.
    modified.
    *final method cannot be overridden      *finally block cleans up all the resources       *finalize method is executed just before the object is destroyed.
    by sub class.                            used in try block
    *final class cannot be inherited.	  *Finally block is executed as soon as the 
    *Final method is executed only when       try-catch block is executed
     we call it.                            *It's execution is not dependant on the exception.


4.What are maker Interfaces

-> A marker interface is an interface that has no methods or constants inside it. It provides run-time type information about objects, 
   so the compiler and JVM have additional information about the object. 
   A marker interface is also called a tagging interface.
   Though marker interfaces are still in use, they very likely point to a code smell and should be used carefully. 
   The main reason for this is that they blur the lines about what an interface represents since markers don't define any behavior. 
   Newer development favors annotations to solve some of the same problems.

5.What is Singleton class

->In object-oriented programming, a singleton class is a class that can have only one object (an instance of the class) at a time. 
  After the first time, if we try to instantiate the Singleton class, the new variable also points to the first instance created. 
  So whatever modifications we do to any variable inside the class through any instance, affects the variable of the single instance 
  created and is visible if we access that variable through any variable of that class type defined. 

6.What is the underlying Data structure for Arraylist and Linkedlist

->Underlying Data Structure
Both ArrayList and LinkedList are two different implementations of the List interface. 
ArrayList is a resizable-array implementation, whereas LinkedList is a Doubly-linked list implementation of the List interface

7.What is hash collitition

->A hash collision is a random match in hash values that occurs when a hashing algorithm produces the same hash value for two distinct pieces of data.
 It's a feature. It arises out of the nature of a hashCode: a mapping from a large value space to a much smaller value space. 
 There are going to be collisions, by design and intent.
 A bad design can make it worse, but it is endemic in the notion.

8.What are lambda Expressions

-> lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, 
 but they do not need a name and they can be implemented right in the body of a method.

9.Whats is functional interface

->A functional interface is an interface that contains only one abstract method. They can have only one functionality to exhibit. 
From Java 8 onwards, lambda expressions can be used to represent the instance of a functional interface. A functional interface can have any number of default methods.

10.What are optional classes in Java 8

->Optional is a container object used to contain not-null objects. Optional object is used to represent null with absent value. This class has various utility methods 
to facilitate code to handle values as ‘available’ or ‘not available’ instead of checking null values.

11.Whats is factory design pattern and Adapter and difference bew them

->Factory Design Pattern
Factory pattern is one of the most used design patterns in Java. This type of design pattern comes under creational pattern as this pattern provides
one of the best ways to create an object.
In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using a common interface.

  Adapter Pattern
Adapter pattern works as a bridge between two incompatible interfaces. This type of design pattern comes under structural pattern as this pattern combines
the capability of two independent interfaces.
This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces. 
A real life example could be a case of card reader which acts as an adapter between memory card and a laptop. You plugin the memory card into card reader 
and card reader into the laptop so that memory card can be read via laptop.

12.What are Solid principles

->SOLID is a popular set of design principles that are used in object-oriented software development.
The following five concepts make up our SOLID principles:
Single Responsibility.
Open/Closed.
Liskov Substitution.
Interface Segregation.
Dependency Inversion.

13. What does @component and @scan do in Sprinboot annaotation

->@Component is an annotation that allows Spring to automatically detect our custom beans. In other words, without having to write any explicit code, 
Spring will: Scan our application for classes annotated with @Component. Instantiate them and inject any specified dependencies into them.

@Sacn Spring provides a mechanism to identify Spring bean candidates explicitly through the @ComponentScan annotation. 
If the application is a Spring Boot application, then all the packages under the package containing the Spring Boot application 
class will be covered by an implicit component scan.

14.Whats is the Diference bew JPA , Hibernate and ORM

->Java Persistence API (JPA) defines the management of relational data in the Java applications. 
It is just a specification. Various ORM tools implement it for data persistence.

Hibernate is an Object-Relational Mapping (ORM) tool which is used to save the state of Java object into the database. 
It is one of the most frequently used JPA implementation.

Object-relational mapping (ORM) is a programming technique in which a metadata descriptor is used to connect object code to a relational database. 
Object code is written in object-oriented programming (OOP) languages such as Java

15.What is indexing in Database

->Indexing is a way to optimize the performance of a database by minimizing the number of disk accesses required when a query is processed. 
It is a data structure technique which is used to quickly locate and access the data in a database. 
Indexes are created using a few database columns.

16.What are 4 types of Drivers in Jdbc

->Type 1: JDBC-ODBC bridge
Type 2: partial Java driver
Type 3: pure Java driver for database middleware
Type 4: pure Java driver for direct-to-database
Type 5: highly-functional drivers with superior performance

17.What is difrence bew @component and @bean and @service

->@Component is an annotation that allows Spring to automatically detect our custom beans. In other words, without having to write any explicit code, 
Spring will: Scan our application for classes annotated with @Component. Instantiate them and inject any specified dependencies into them.

Spring @Bean annotation tells that a method produces a bean to be managed by the Spring container. It is a method-level annotation. 
During Java configuration ( @Configuration ), the method is executed and its return value is registered as a bean within a BeanFactory.

@Service->It is used to mark the class as a service provider. So overall @Service annotation is used with classes that provide some business functionalities. 
Spring context will autodetect these classes when annotation-based configuration and classpath scanning is used.


18. What is difference bew SOAP and restful services techinically

->Simple object access protocol (SOAP) is an official protocol maintained by the World Wide Web Consortium (W3C). 
The main difference is that SOAP is a protocol while REST is not. Typically, an API will adhere to either REST or SOAP, 
depending on the use case and preferences of the developer.

19 . Difference in POST and PUT

->PUT method is call when you have to modify a single resource, which is already a part of resource collection. 
POST method is call when you have to add a child resource under resources collection

20.IS react uni directional or Bi directional

->React, a Javascript library, uses unidirectional data flow.
React doesn't support bi-directional binding to make sure you are following a clean data flow architecture. 
The major benefit of this approach is that data flows throughout your app in a single direction, giving you better control over it.